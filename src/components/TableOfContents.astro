---
import { Header } from '../types'
    
export interface Props {
    headers: Header[]
}
const { headers } = Astro.props

const tableOfContentsHeaders = [{depth: 2, text:'Introduction', slug: 'introduction'}, ...headers]
---
<nav
    id="toc"
    style="--toc-header-offset: 1.25em"
    aria-label="Table of contents"
>
    <p style={`padding-left: calc(2 * var(--toc-header-offset))`} class="py-0.5 text-lg font-bold border-l-2 border-transparent">On this page</p>
    <ul>
        {tableOfContentsHeaders.map((header)=> (
            <li>
                <a
                    href={'#' + header.slug}
                    data-heading-id={header.slug}
                    style={`padding-left: calc(${header.depth} * var(--toc-header-offset))`}
                    class={"block py-0.5 text-brand-light-blue border-l-2 border-l-brand-dark-green-analogous"+" depth-" + header.depth}
                >
                    {header.text}
                </a>
            </li>
        ))}
    </ul>
</nav>
<script hoist>
    const wrapperElement = document.querySelector('article')
    const headingElements = Array.from(wrapperElement.querySelectorAll("h2, h3, h4"))
    const tocHeadings = Array.from(document.querySelectorAll('a[data-heading-id]'))

    function intersectedFromTop(i) {
        return i.rootBounds.bottom - i.boundingClientRect.bottom > i.rootBounds.bottom / 2
    }

    function highlightTocHeading(id) {
        if (!id) return
        tocHeadings.forEach(tocHeading => tocHeading.classList.remove("active"));
        tocHeadings.find((el) => el.dataset.headingId === id).classList.add("active")
    }

    const callback = (headings) => {
        headings.map(i => {
            if (i.time < 500) return /* Remove random highlighting heading in initial page load */
            let top = intersectedFromTop(i);
            if (!top && !i.isIntersecting) {
                const indexOfThisHeading = headingElements.findIndex(h => h === i.target)
                if (indexOfThisHeading === 0) return
                highlightTocHeading(headingElements[indexOfThisHeading - 1].id)
            } else if (i.isIntersecting) {
                highlightTocHeading(i.target.id)
            }
        })
    };

    const options = {
        root: null,
        rootMargin: '-100px 0px -60% 0px',
        threshold: [1],
    };
    const observer = new IntersectionObserver(callback, options);
    headingElements.forEach((el) => observer.observe(el));
    window.addEventListener('beforeunload', () => observer.disconnect())
</script>

<style>
    #toc a:hover {
      color: var(--dark-green);
    }
    #toc a.active {
      border-color: var(--dark-green);
      color: var(--dark-green);
    }
</style>

